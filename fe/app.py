# fe/app.py
import streamlit as st
import requests
import json
import io
import base64
import zipfile
import uuid
import datetime
import os
import re
from dotenv import load_dotenv

# N·∫°p bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

API_URL = "http://api:8000/ocr"

# ============================================================
# C·∫•u h√¨nh trang + CSS nh·ªè
# ============================================================
st.set_page_config(layout="wide", page_title="·ª®ng d·ª•ng OCR", page_icon="üìÑ")

st.markdown(
    """
    <style>
    .reportview-container .main .block-container{max-width:100%!important; padding:1rem 2rem;}
    /* ·∫®n t·∫•t c·∫£ c√°c n√∫t hi·ªÉn th·ªã m·∫≠t kh·∫©u */
    button[title="Show password"],
    button[title="Show password text"],
    div[data-testid="stPasswordField"] button,
    div[data-testid="stTextInput"] button,
    input[type="password"] ~ button {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        width: 0 !important;
        height: 0 !important;
        position: absolute !important;
        pointer-events: none !important;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# ============================================================
# Ti·ªán √≠ch chung
# ============================================================

def show_toast(msg: str, dur: int = 3000):
    st.toast(msg, icon="‚ÑπÔ∏è")

def build_data_uri(raw: bytes, mime: str) -> str:
    return f"data:{mime};base64,{base64.b64encode(raw).decode()}"

# Auto‚Äëdownload helper (inject HTML + JS click)
def auto_download(bytes_data: bytes, mime: str, filename: str):
    b64 = base64.b64encode(bytes_data).decode()
    element_id = f"dl_{uuid.uuid4().hex}"
    href = f'<a id="{element_id}" href="data:{mime};base64,{b64}" download="{filename}"></a>'
    js = f"<script>document.getElementById('{element_id}').click();</script>"
    st.markdown(href + js, unsafe_allow_html=True)

# Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa API key
def validate_api_key(api_key):
    try:
        # G·ª≠i request ki·ªÉm tra ƒë·∫øn API
        response = requests.post(
            "http://api:8000/ocr/validate",
            json={"api_key": api_key}
        )
        
        # Ki·ªÉm tra k·∫øt qu·∫£
        if response.status_code == 200:
            data = response.json()
            return data.get("valid", False)
        return False
    except Exception as e:
        st.error(f"L·ªói ki·ªÉm tra API key: {str(e)}")
        return False

# ============================================================
# Kh·ªüi t·∫°o session_state m·∫∑c ƒë·ªãnh
# ============================================================

st.session_state.setdefault("history", {})         # id ‚Üí {names, previews, results}
st.session_state.setdefault("history_list", [])
st.session_state.setdefault("current_session", None)
st.session_state.setdefault("ocr_running", False)
st.session_state.setdefault("zip_buffer", None)
st.session_state.setdefault("zip_name", None)
st.session_state.setdefault("custom_api_key", "")
st.session_state.setdefault("use_custom_api_key", False)

# ============================================================
# Ti√™u ƒë·ªÅ & m√¥ t·∫£
# ============================================================

st.title("·ª®ng d·ª•ng OCR cho PDF v√† H√¨nh ·∫£nh")
with st.expander("Gi·ªõi thi·ªáu"):
    st.markdown(
        "·ª®ng d·ª•ng tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ PDF/·∫£nh b·∫±ng Mistral OCR.\n"
        "- H·ªó tr·ª£ nh·∫≠p URL (.pdf/.png/.jpg/.jpeg) ho·∫∑c upload file.\n"
        "- M·ªói l·∫ßn ch·∫°y sinh phi√™n (`sess_YYYYMMDD_HHMMSS`) v√† l∆∞u l·ªãch s·ª≠.\n"
        "- Ch·ªçn phi√™n trong sidebar ƒë·ªÉ xem l·∫°i & t·∫£i xu·ªëng.\n"
        "- Ch·ªçn ƒë·ªãnh d·∫°ng trong tab **T·∫£i xu·ªëng / Ch·ªânh s·ª≠a** l√† t·ª± t·∫£i file."
    )

# ============================================================
# Sidebar: C·∫•u h√¨nh OCR, ngu·ªìn d·ªØ li·ªáu, phi√™n, t·∫£i zipfile
# ============================================================

with st.sidebar:
    # ---- C·∫•u h√¨nh OCR ----
    st.header("C·∫•u h√¨nh OCR")
    
    # ƒê·ªçc OCR_MODE t·ª´ .env
    default_ocr_mode = os.getenv("OCR_MODE", "api")
    ocr_method = st.selectbox(
        "Ph∆∞∆°ng ph√°p OCR:", 
        ["Mistral OCR (API)", "Mistral OCR (Local)"], 
        index=0 if default_ocr_mode == "api" else 1,
        key="ocr_method",
        help="L·ª±a ch·ªçn ph∆∞∆°ng ph√°p OCR!"
    )

    # X·ª≠ l√Ω t√πy theo ph∆∞∆°ng ph√°p ƒë∆∞·ª£c ch·ªçn
    if ocr_method == "Mistral OCR (Local)":
        # C√°c model m·∫∑c ƒë·ªãnh
        models = {
            "mistral-7b": "/models/mistral/7B.gguf",
            "mistral-small": "/models/gguf/mistral-small.gguf",
            "mistral-medium": "/models/gguf/mistral-medium.gguf",
        }
        
        # N·∫øu c√≥ ƒë∆∞·ªùng d·∫´n model trong .env, th√™m v√†o
        local_model_path = os.getenv("LOCAL_MODEL_PATH")
        if local_model_path:
            model_name = os.path.basename(local_model_path)
            models[model_name] = local_model_path
            
        local_model = st.selectbox("M√¥ h√¨nh Local:", list(models), key="local_model")
        st.markdown(f"**ƒê∆∞·ªùng d·∫´n:** `{models[local_model]}`")
    else:
        # L·∫•y API key t·ª´ .env
        default_api_key = os.getenv("MISTRAL_API_KEY", "")
        
        # Th√™m ch·ª©c nƒÉng thay ƒë·ªïi API key
        change_api = st.checkbox("Thay ƒë·ªïi API Key", value=st.session_state.get("change_api_key", False))
        
        # Ki·ªÉm tra n·∫øu tr·∫°ng th√°i checkbox thay ƒë·ªïi
        if change_api != st.session_state.get("change_api_key", False):
            # N·∫øu v·ª´a m·ªõi check, reset gi√° tr·ªã input
            if change_api:
                st.session_state["temp_api_key"] = ""
            st.session_state["change_api_key"] = change_api
        
        # Hi·ªÉn th·ªã API key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ho·∫∑c √¥ nh·∫≠p API key m·ªõi
        if change_api:
            # Hi·ªÉn th·ªã √¥ nh·∫≠p API key m·ªõi
            custom_api_key = st.text_input(
                "API Key:", 
                value=st.session_state.get("temp_api_key", ""),
                type="password", 
                key="input_custom_api_key",
                help="API Key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh, kh√¥ng hi·ªÉn th·ªã!"
            )
            
            # L∆∞u gi√° tr·ªã t·∫°m th·ªùi
            st.session_state["temp_api_key"] = custom_api_key
            
            if custom_api_key and custom_api_key != st.session_state.get("custom_api_key", ""):
                # T·ª± ƒë·ªông ki·ªÉm tra khi API key thay ƒë·ªïi
                is_valid = validate_api_key(custom_api_key)
                if is_valid:
                    st.session_state["custom_api_key"] = custom_api_key
                    st.session_state["use_custom_api_key"] = True
                    # T·ª± ƒë·ªông ·∫©n √¥ input sau khi nh·∫≠p th√†nh c√¥ng
                    st.session_state["change_api_key"] = False
                    st.session_state["temp_api_key"] = ""
                    st.success("API Key h·ª£p l·ªá v√† ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng!")
                    st.rerun()  # Rerun ƒë·ªÉ c·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
                else:
                    st.error("API Key kh√¥ng h·ª£p l·ªá, vui l√≤ng ki·ªÉm tra l·∫°i!")
        else:
            # Hi·ªÉn th·ªã API key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh v·ªõi help text
            if default_api_key or st.session_state.get("use_custom_api_key", False):
                st.text_input(
                    "API Key:", 
                    value="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢",
                    disabled=True,
                    key="api_key_display",
                    help="API Key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh, kh√¥ng hi·ªÉn th·ªã!"
                )
            else:
                st.error("Thi·∫øu API Key trong file .env")
        
        # S·ª≠ d·ª•ng API key n√†o
        api_key = st.session_state.get("custom_api_key", "") if st.session_state.get("use_custom_api_key", False) else default_api_key

    st.markdown("---")

    # ---- Ngu·ªìn d·ªØ li·ªáu ----
    st.subheader("Ngu·ªìn T·∫£i l√™n")
    source_type = st.radio("Lo·∫°i ngu·ªìn:", ["Upload File", "URL"], key="source_type")

    uploaded_files, raw_urls = [], ""
    if source_type == "Upload File":
        # L·∫•y tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥ ƒë·ªÉ bi·∫øt khi n√†o s·ªë l∆∞·ª£ng file thay ƒë·ªïi
        prev_upload_count = st.session_state.get("prev_upload_count", 0)
        
        uploaded_files = st.file_uploader(
            "Ch·ªçn PDF/·∫¢nh", accept_multiple_files=True, type=["pdf", "png", "jpg", "jpeg"]
        )
        
        # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng file ƒë√£ upload
        if uploaded_files:
            current_count = len(uploaded_files)
            # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu s·ªë l∆∞·ª£ng file thay ƒë·ªïi
            if current_count != prev_upload_count:
                st.session_state["prev_upload_count"] = current_count
                # S·ª≠ d·ª•ng success message thay v√¨ toast
                st.success(f"ƒê√£ t·∫£i l√™n {current_count} file")
    else:
        raw_urls = st.text_area(
            "URL (.pdf/.png/.jpg/.jpeg):", 
            key="raw_urls", 
            height=150,
            placeholder="https://example.com/document.pdf\nhttps://example.com/image.jpg"
        )
        if raw_urls:
            urls = re.findall(r"https?://\S+?\.(?:pdf|png|jpe?g)", raw_urls, flags=re.I)
            if urls:
                st.success(f"ƒê√£ ph√°t hi·ªán {len(urls)} URL h·ª£p l·ªá")
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y URL h·ª£p l·ªá")

    # ---- Chu·∫©n b·ªã danh s√°ch sources ----
    sources = uploaded_files if source_type == "Upload File" else (
        re.findall(r"https?://\S+?\.(?:pdf|png|jpe?g)", raw_urls, flags=re.I) if raw_urls else []
    )
    
    # ---- N√∫t th·ª±c thi OCR ----
    run_disabled = (
        not sources or 
        st.session_state["ocr_running"] or 
        (ocr_method == "Mistral OCR (API)" and not (st.session_state.get("custom_api_key", "") if st.session_state.get("use_custom_api_key", False) else default_api_key))
    )
    if st.button("Th·ª±c hi·ªán OCR", disabled=run_disabled):
        st.session_state["zip_buffer"] = None
        st.session_state["zip_name"] = None
        st.session_state["ocr_running"] = True
        
        # L∆∞u API key hi·ªán t·∫°i v√†o session state ƒë·ªÉ s·ª≠ d·ª•ng khi g·ªçi OCR
        if ocr_method == "Mistral OCR (API)":
            st.session_state["current_api_key"] = st.session_state.get("custom_api_key", "") if st.session_state.get("use_custom_api_key", False) else default_api_key
        
        st.rerun()

    # ---- Ch·ªçn phi√™n l·ªãch s·ª≠ ----
    if st.session_state["history_list"]:
        sess_opts = st.session_state["history_list"][::-1]  # m·ªõi nh·∫•t tr∆∞·ªõc
        sel_sess = st.selectbox(
            "Ch·ªçn phi√™n k·∫øt qu·∫£:", sess_opts,
            index=sess_opts.index(st.session_state["current_session"]) if st.session_state["current_session"] in sess_opts else 0,
            key="sess_select"
        )
        if sel_sess != st.session_state.get("current_session"):
            st.session_state["current_session"] = sel_sess
            st.rerun()

    # ---- T·∫£i ZIP to√†n phi√™n ----
    if st.session_state.get("zip_buffer"):
        st.download_button(
            "T·∫£i ZIP k·∫øt qu·∫£ phi√™n", st.session_state["zip_buffer"].getvalue(),
            file_name=f"{st.session_state['zip_name']}.zip", mime="application/zip", key="download_zip_full"
        )

# ============================================================
# Preview c·ªßa sources (n·∫øu ch∆∞a ch·∫°y v√† kh√¥ng c√≥ k·∫øt qu·∫£ hi·ªÉn th·ªã)
# ============================================================

preview_container = st.container()
show_preview = sources and not st.session_state["ocr_running"] and not st.session_state.get("current_session")

if show_preview:
    with preview_container:
        st.markdown("---"); st.header("Xem tr∆∞·ªõc ngu·ªìn")
        
        # T·∫°o list t√™n ngu·ªìn cho selectbox
        source_names = []
        for i, src in enumerate(sources, 1):
            if isinstance(src, str):
                name = os.path.basename(src)
            else:
                name = src.name if hasattr(src, "name") else f"File {i}"
            source_names.append(name)
        
        # N·∫øu c√≥ nhi·ªÅu ngu·ªìn, s·ª≠ d·ª•ng selectbox ƒë·ªÉ ch·ªçn ngu·ªìn xem tr∆∞·ªõc
        if len(sources) > 1:
            st.write(f"**S·ªë ngu·ªìn: {len(sources)}**")
            selected_idx = st.selectbox(
                "Ch·ªçn ngu·ªìn ƒë·ªÉ xem tr∆∞·ªõc:",
                range(len(sources)),
                format_func=lambda i: source_names[i],
                key="preview_selectbox"
            )
            selected_sources = [sources[selected_idx]]
            st.write(f"**ƒêang xem: {source_names[selected_idx]}**")
        else:
            selected_sources = sources
        
        # Hi·ªÉn th·ªã ngu·ªìn ƒë∆∞·ª£c ch·ªçn
        for i, src in enumerate(selected_sources):
            if isinstance(src, str):
                prev = src
                name = os.path.basename(src)
            else:
                raw = src.read(); src.seek(0)
                prev = build_data_uri(raw, src.type)
                name = src.name if hasattr(src, "name") else f"File {i+1}"
            
            # T·∫°o card v·ªõi container ƒë·ªÉ hi·ªÉn th·ªã file
            if len(sources) == 1:  # Ch·ªâ hi·ªÉn th·ªã t√™n file khi kh√¥ng c√≥ selectbox
                st.write(f"**File: {name}**")
            
            preview_col = st.container()
            with preview_col:
                if prev.lower().endswith(".pdf") or prev.startswith("data:application/pdf"):
                    # S·ª≠ d·ª•ng layout to√†n m√†n h√¨nh cho PDF v·ªõi chi·ªÅu cao l·ªõn h∆°n
                    st.markdown(
                        f"""
                        <div style="width:100%; height:90vh; overflow:hidden; border:1px solid #ccc; border-radius:5px; margin-bottom:20px;">
                            <iframe src="{prev}" width="100%" height="100%" 
                                style="transform:scale(1); transform-origin:top left; border:none;"
                                allowfullscreen></iframe>
                        </div>
                        """, 
                        unsafe_allow_html=True
                    )
                else:
                    # Hi·ªÉn th·ªã ·∫£nh v·ªõi k√≠ch th∆∞·ªõc t·ªëi ƒëa
                    st.image(prev, use_container_width=True)
                    st.markdown(
                        """
                        <div style="text-align:center; margin-top:-15px; margin-bottom:15px;">
                            <small>üí° Nh·∫•n v√†o ·∫£nh ƒë·ªÉ xem ph√≥ng to</small>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
else:
    preview_container.empty()

# ============================================================
# Th·ª±c hi·ªán OCR  (khi ocr_running == True)
# ============================================================

if st.session_state["ocr_running"] and sources:
    preview_container.empty()
    sess_id = f"sess_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"
    names, previews, results = [], [], {}

    progress = st.progress(0)
    total = len(sources)

    for i, src in enumerate(sources, 1):
        name = src.name if hasattr(src, "name") else (os.path.basename(src) if isinstance(src, str) else f"file_{i}")
        try:
            if isinstance(src, str):  # URL
                with st.spinner(f"T·∫£i {name} t·ª´ URL..."):
                    # G·ª≠i URL tr·ª±c ti·∫øp ƒë·∫øn API thay v√¨ t·∫£i tr∆∞·ªõc
                    res = requests.post(
                        API_URL,
                        data={
                            "url": src,
                            "api_key": st.session_state.get("current_api_key", "")
                        }
                    )
                    res.raise_for_status()
                    data = res.json()
                    text = data.get("text", "")
                    prev = src
            else:  # File upload
                raw = src.read(); src.seek(0)
                prev = build_data_uri(raw, src.type)
                
                # OCR qua API
                with st.spinner(f"OCR {name} ..."):
                    files = {"file": (name, raw, src.type)}
                    data = {"api_key": st.session_state.get("current_api_key", "")}
                    res = requests.post(
                        API_URL,
                        files=files,
                        data=data
                    )
                    res.raise_for_status()
                    data = res.json()
                    text = data.get("text", "")

            names.append(name); previews.append(prev); results[name] = text
        except Exception as e:
            show_toast(f"L·ªói {name}: {e}")
        finally:
            progress.progress(i / total)

    progress.empty()

    # L∆∞u l·ªãch s·ª≠
    st.session_state["history"][sess_id] = {
        "names": names, "previews": previews, "results": results
    }
    st.session_state["history_list"].append(sess_id)
    st.session_state["current_session"] = sess_id

    # ƒê√≥ng g√≥i ZIP to√†n phi√™n
    try:
        zip_buf = io.BytesIO()
        with zipfile.ZipFile(zip_buf, "w", zipfile.ZIP_DEFLATED) as zf:
            for n, txt in results.items():
                base = os.path.splitext(n)[0]
                zf.writestr(f"{base}.txt", txt)
                zf.writestr(f"{base}.md", txt)
                zf.writestr(f"{base}.json", json.dumps({"result": txt}, ensure_ascii=False, indent=2))
        zip_buf.seek(0)
        st.session_state["zip_buffer"] = zip_buf
        st.session_state["zip_name"] = sess_id
        show_toast("OCR ho√†n th√†nh!")
    except Exception as e:
        show_toast(f"L·ªói ƒë√≥ng ZIP: {e}")

    st.session_state["ocr_running"] = False
    st.rerun()

# ============================================================
# Hi·ªÉn th·ªã k·∫øt qu·∫£ phi√™n hi·ªán t·∫°i
# ============================================================

if st.session_state.get("current_session"):
    data = st.session_state["history"][st.session_state["current_session"]]

    st.markdown("---"); st.header(f"K·∫øt qu·∫£ phi√™n: {st.session_state['current_session']}")
    
    # Th√™m selectbox ƒë·ªÉ d·ªÖ d√†ng ch·ªçn ngu·ªìn khi c√≥ nhi·ªÅu k·∫øt qu·∫£
    if len(data["names"]) > 1:
        st.write(f"**S·ªë k·∫øt qu·∫£: {len(data['names'])}**")
        selected_idx = st.selectbox(
            "Ch·ªçn ngu·ªìn ƒë·ªÉ xem k·∫øt qu·∫£:",
            range(len(data["names"])),
            format_func=lambda i: data["names"][i],
            key="results_selectbox"
        )
        # Hi·ªÉn th·ªã ch·ªâ ngu·ªìn ƒë∆∞·ª£c ch·ªçn
        selected_indices = [selected_idx]
        st.write(f"**ƒêang xem: {data['names'][selected_idx]}**")
    else:
        # Hi·ªÉn th·ªã t·∫•t c·∫£ n·∫øu ch·ªâ c√≥ 1 ngu·ªìn
        selected_indices = range(len(data["names"]))
    
    # Hi·ªÉn th·ªã cho m·ªói ngu·ªìn ƒë∆∞·ª£c ch·ªçn
    for selected_idx in selected_indices:
        fname = data["names"][selected_idx]
        prev = data["previews"][selected_idx]
        text = data["results"][fname]

        # Ch·ªâ hi·ªÉn th·ªã s·ªë ngu·ªìn n·∫øu kh√¥ng c√≥ selectbox
        if len(data["names"]) == 1:
            st.markdown(f"### Ngu·ªìn: {fname}")
        
        tab1, tab2, tab3 = st.tabs(["G·ªëc", "So s√°nh", "T·∫£i xu·ªëng / Ch·ªânh s·ª≠a"])

        # ---------- Tab G·ªëc ----------
        with tab1:
            if prev.lower().endswith(".pdf") or "application/pdf" in prev:
                st.markdown(
                    f"""
                    <div style="width:100%; height:90vh; overflow:hidden; border:1px solid #ccc; border-radius:5px; margin-bottom:20px;">
                        <iframe src="{prev}" width="100%" height="100%" 
                            style="transform:scale(1); transform-origin:top left; border:none;"
                            allowfullscreen></iframe>
                    </div>
                    """, 
                    unsafe_allow_html=True
                )
            else:
                st.image(prev, use_container_width=True)
                st.markdown(
                    """
                    <div style="text-align:center; margin-top:-15px; margin-bottom:15px;">
                        <small>üí° Nh·∫•n v√†o ·∫£nh ƒë·ªÉ xem ph√≥ng to</small>
                    </div>
                    """,
                    unsafe_allow_html=True
                )

        # ---------- Tab So s√°nh ----------
        with tab2:
            c1, c2 = st.columns(2)
            with c1:
                st.markdown("**File g·ªëc**")
                if prev.lower().endswith(".pdf") or "application/pdf" in prev:
                    st.markdown(
                        f"""
                        <div style="width:100%; height:70vh; overflow:hidden; border:1px solid #ccc; border-radius:5px;">
                            <iframe src="{prev}" width="100%" height="100%" 
                                style="transform:scale(1); transform-origin:top left; border:none;"
                                allowfullscreen></iframe>
                        </div>
                        """, 
                        unsafe_allow_html=True
                    )
                else:
                    st.image(prev, use_container_width=True)
            with c2:
                st.markdown("**Text OCR**")
                # S·ª≠ d·ª•ng container c√≥ th·ªÉ cu·ªôn v·ªõi chi·ªÅu cao ph√π h·ª£p v·ªõi khung PDF
                st.markdown(
                    f"""
                    <div style="width:100%; height:70vh; overflow:auto; border:1px solid #ccc; border-radius:5px; padding:10px; font-family:monospace; white-space:pre-wrap;">
                    {text.replace("<", "&lt;").replace(">", "&gt;")}
                    </div>
                    """,
                    unsafe_allow_html=True
                )

        # ---------- Tab T·∫£i xu·ªëng / Ch·ªânh s·ª≠a ----------
        with tab3:
            edited_key = f"edited_{st.session_state['current_session']}_{selected_idx}"
            edited_text = st.text_area("Ch·ªânh s·ª≠a n·ªôi dung:", text, height=400, key=edited_key)

            # Ch·ªçn ƒë·ªãnh d·∫°ng ‚Üí t·ª± t·∫£i
            fmt_key = f"fmt_{st.session_state['current_session']}_{selected_idx}"
            fmt = st.selectbox("ƒê·ªãnh d·∫°ng t·∫£i xu·ªëng", ["TXT", "MD", "JSON"], key=fmt_key)

            if fmt == "TXT":
                bytes_data = edited_text.encode(); mime, ext = "text/plain", "txt"
            elif fmt == "MD":
                bytes_data = edited_text.encode(); mime, ext = "text/markdown", "md"
            else:
                bytes_data = json.dumps({"result": edited_text}, ensure_ascii=False, indent=2).encode(); mime, ext = "application/json", "json"

            # Auto-download khi ƒë·ªïi fmt (d·ª±a tr√™n state so s√°nh)
            last_key = f"last_fmt_{st.session_state['current_session']}_{selected_idx}"
            if st.session_state.get(last_key) != fmt:
                st.session_state[last_key] = fmt
                auto_download(bytes_data, mime, f"{os.path.splitext(fname)[0]}.{ext}")

            # Hi·ªÉn th·ªã link/n√∫t d·ª± ph√≤ng
            st.download_button(
                label=f"T·∫£i {ext.upper()} (th·ªß c√¥ng)", data=bytes_data,
                file_name=f"{os.path.splitext(fname)[0]}.{ext}", mime=mime,
                key=f"dl_btn_{selected_idx}_{ext}"
            )
